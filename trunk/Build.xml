<?xml version="1.0" encoding="UTF-8"?>
<project name="Pagoda" default="try_jar" basedir=".">
	<description>
	This buildfile is used to build the jar of the game.
	</description>

	<!-- ================== Property Definitions ===================== -->
	<property file="${user.home}/Pagoda.properties" />
	<property file="${user.home}/.Pagoda.properties" />
	<property file="${basedir}/Pagoda.properties" />

	<!-- ================= File and Directory Names ==================== -->
	<property name="src" location="${basedir}/src" />
	<property name="build" location="${basedir}/build" />
	<property name="dist" location="${basedir}/dist" />
	<property name="app.name" value="Pagoda" />
	<property name="dist.jarHome" value="${user.home}/Pagoda" />
	<property name="app.version" value="3.0" />
	<tstamp />
	<property name="jar.name" value="${app.name}_${app.version}.${DSTAMP}.jar" />
	<property name="jar.completePath" value="${dist.jarHome}/${jar.name}" />



	<!-- Here you must specify the directory in which jar files needed by this plugin to run are stored  -->

	<property name="shared.lib" value="${basedir}/lib" />

	<!-- =============== Custom Ant Task Definitions =================== -->
	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />

	<!-- ================== External Dependencies ======================= -->
	<property name="Database" value="hsqldb.jar" />

	<!-- ================== Compilation Classpath ======================= -->

	<path id="compile.classpath">
		<!--<pathelement location="${src.home}"/>-->
		<fileset dir="${src}">
			<include name="**/*.java" />
		</fileset>
		<fileset dir="${shared.lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- =================== All Target ================================ -->

	<!-- ================== Try_jar Target ============================ -->
	<target name="try_jar" depends="compile, dist, signjar, clean_class_files, run" description="Clean build and dist directories, then compile, create and sign jar and finally run Core.jar" />

	<!-- ================== Clean Target ============================== -->

	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<!-- ================== Prepare Target ============================= -->

	<target name="prepare" depends="clean">
		<mkdir dir="${build}" />
		<mkdir dir="${build}/classes" />
		<mkdir dir="${build}/lib" />
		<copy todir="${build}/lib">
			<fileset dir="${shared.lib}" includes="${Database}" />
		</copy>
	</target>

	<!-- ================== Compile Target =========================== -->

	<target name="compile" depends="prepare" description="Compile Java sources">

		<mkdir dir="${build}/classes" />
		<javac srcdir="${src}" destdir="${build}/classes" encoding="8859_1" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}" source="1.6" target="1.6">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<!-- =================== Dist Target ================================ -->
	<target name="dist" description="Creates Jar archive">
		<!-- Create the time stamp -->
		<tstamp>
			<format property="compile.timestamp" pattern="yyyyMMddHHmm" />
		</tstamp>
		<!-- update core version in manifest -->
		<replaceregexp file="${basedir}/manifest" match="Implementation-Version: .*" replace="Implementation-Version: ${app.version}.${compile.timestamp}" />
		<!-- Create Jar file -->
		<jar destfile="${jar.completePath}" manifest="${basedir}/manifest">
			<fileset dir="${build}/classes" excludes="**/*.bak" />
			<zipfileset src="${shared.lib}/${Database}" />
		</jar>
		
	<copy todir="${dist.jarHome}/db" >  
	        <fileset dir="${basedir}/db" includes="**"/>  
	 </copy>
		<copy todir="${dist.jarHome}/res" >  
		        <fileset dir="${basedir}/res" includes="**"/>  
		 </copy>
		<copy todir="${dist.jarHome}/images" >  
		        <fileset dir="${basedir}/images" includes="**"/>  
		 </copy>
		
	</target>

	<!-- ================== SignJar Target ============================ -->
	<target name="signjar" description="Signs jar with keystore taken from your shared.lib folder">
		<!--<signjar jar="${jar.completePath}" keystore="${shared.lib}/paripari.jks" alias="irc" storepass="${keystore.password}" keypass="${private.password}"/>-->
	</target>

	<!-- ================== Javadoc Target ============================ -->

	<target name="javadoc" depends="compile" description="Create Javadoc API documentation">

		<mkdir dir="${dist}/docs/api" />
		<javadoc sourcepath="${src}" destdir="${dist}/docs/api" packagenames="*">
			<classpath refid="compile.classpath" />
		</javadoc>

	</target>

	<!-- ================== RmBak Target ============================= -->

	<target name="rmbak" description="Delete *.bak files everywhere">

		<delete>
			<fileset dir="${docs}" includes="**/*.bak" />
			<fileset dir="${src}" includes="**/*.bak" />
		</delete>

	</target>

	<!-- ================== RmLog Target ============================= -->

	<target name="rmlog" description="Delete *.log files from build directory">

		<delete>
			<fileset dir="${build.home}" includes="**/*.log*" />
		</delete>

	</target>
	<!-- =================== Delete .class Target===================== -->
	<target name="clean_class_files" description="Delete .class files stored inside build directory and dist folder">
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<!-- ================== Run Target =============================== -->
	<target name="run" description="Run Pagoda">
		<java jar="${jar.completePath}" fork="true">
		</java>
	</target>

</project>